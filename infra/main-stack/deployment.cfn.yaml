---
AWSTemplateFormatVersion: "2010-09-09"

Description: "Deploys the mux video monitor"

Parameters:
  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
  AppDomain:
    Type: String
  AttendDomain:
    Type: String
  BackendLambdaS3Bucket:
    Type: String
  BackendLambdaS3Key:
    Type: String
  AttendJWTIssuer:
    Type: String
  AttendJWTAudience:
    Type: String

Resources:
  AppCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: !Sub "${AppDomain}"
      DomainValidationOptions:
        - DomainName: !Sub "${AppDomain}"
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: "DNS"

  AttendCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: !Sub "${AttendDomain}"
      DomainValidationOptions:
        - DomainName: !Sub "${AttendDomain}"
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: "DNS"

  CacheTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: CacheKind
          AttributeType: S
        - AttributeName: CacheKey
          AttributeType: S
      BillingMode: "PAY_PER_REQUEST"
      KeySchema:
        - AttributeName: CacheKind
          KeyType: HASH
        - AttributeName: CacheKey
          KeyType: RANGE

  BackendLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
            Effect: "Allow"

  CanPopulateDynamoCache:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "CanPopulateDynamoCache"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "dynamodb:Get*"
              - "dynamodb:Put*"
            Resource:
              - !GetAtt "CacheTable.Arn"
      Roles:
        - !Ref "BackendLambdaRole"

  CanReadFromSSM:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "CanReadFromSSM"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "ssm:GetParameter"
              - "ssm:GetParameters"
              - "ssm:GetParametersByPath"
              - "ssm:ListTagsForResource"
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/multiview/mux/*"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/multiview/ably/*"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/multiview/attend/*"
      Roles:
        - !Ref "BackendLambdaRole"

  BackendGetStreamFn:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref BackendLambdaS3Bucket
        S3Key: !Ref BackendLambdaS3Key
      Handler: src/index.getStream
      Role: !GetAtt "BackendLambdaRole.Arn"
      Runtime: "nodejs18.x"
      Timeout: 25
      Environment:
        Variables:
          CACHE_TABLE_NAME: !Ref "CacheTable"

  BackendListRoomsFn:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref BackendLambdaS3Bucket
        S3Key: !Ref BackendLambdaS3Key
      Handler: src/index.listRooms
      Role: !GetAtt "BackendLambdaRole.Arn"
      Runtime: "nodejs18.x"
      Timeout: 25
      Environment:
        Variables:
          CACHE_TABLE_NAME: !Ref "CacheTable"

  BackendRefreshFn:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref BackendLambdaS3Bucket
        S3Key: !Ref BackendLambdaS3Key
      Handler: src/index.refresh
      Role: !GetAtt "BackendLambdaRole.Arn"
      Runtime: "nodejs18.x"
      Timeout: 25
      Environment:
        Variables:
          CACHE_TABLE_NAME: !Ref "CacheTable"

  BackendMuxFn:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref BackendLambdaS3Bucket
        S3Key: !Ref BackendLambdaS3Key
      Handler: src/index.muxWebhook
      Role: !GetAtt "BackendLambdaRole.Arn"
      Runtime: "nodejs18.x"
      Timeout: 25
      Environment:
        Variables:
          CACHE_TABLE_NAME: !Ref "CacheTable"
          ABLY_SERVER_KEY: "/multiview/ably/server"

  BackendAblyKeyFn:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref BackendLambdaS3Bucket
        S3Key: !Ref BackendLambdaS3Key
      Handler: src/index.ablyKey
      Role: !GetAtt "BackendLambdaRole.Arn"
      Runtime: "nodejs18.x"
      Timeout: 25
      Environment:
        Variables:
          CACHE_TABLE_NAME: !Ref "CacheTable"
          ABLY_CLIENT_KEY: "/multiview/ably/client"

  BackendAttendFn:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref BackendLambdaS3Bucket
        S3Key: !Ref BackendLambdaS3Key
      Handler: src/index.attend
      Role: !GetAtt "BackendLambdaRole.Arn"
      Runtime: "nodejs18.x"
      Timeout: 25
      Environment:
        Variables:
          CACHE_TABLE_NAME: !Ref "CacheTable"
          ATTEND_JWT_PRIVATE_KEY: "/multiview/attend/ATTEND_JWT_PRIVATE_KEY"
          ATTEND_JWT_ISSUER: !Ref "AttendJWTIssuer"
          ATTEND_JWT_AUDIENCE: !Ref "AttendJWTAudience"

  BackendAPIRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "lambda:*"
                Resource:
                  - !GetAtt BackendGetStreamFn.Arn
                  - !GetAtt BackendListRoomsFn.Arn
                  - !GetAtt BackendRefreshFn.Arn
                  - !GetAtt BackendMuxFn.Arn
                  - !GetAtt BackendAblyKeyFn.Arn
                  - !GetAtt BackendAttendFn.Arn

  BackendAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      ProtocolType: HTTP
      Description: !Sub "${AWS::StackName} API"
      Name: !Sub "${AWS::StackName}-api"
      CorsConfiguration:
        AllowCredentials: true
        AllowHeaders:
          - "authorization"
          - "content-type"
        AllowMethods:
          - "GET"
          - "POST"
        AllowOrigins:
          - "http://localhost:1234"
          - "https://nextdayvideo.com"
          - !Sub "https://${AppDomain}"
          - !Sub "https://${AttendDomain}"

  BackendGetStreamIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref BackendAPI
      Description: "Get Stream"
      ConnectionType: INTERNET
      CredentialsArn: !GetAtt "BackendAPIRole.Arn"
      PassthroughBehavior: "WHEN_NO_MATCH"
      TimeoutInMillis: 29000
      IntegrationMethod: "POST"
      IntegrationType: "AWS_PROXY"
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendGetStreamFn.Arn}/invocations"

  BackendGetStreamRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BackendAPI
      RouteKey: GET /stream/{muxTokenId}
      Target: !Sub "integrations/${BackendGetStreamIntegration}"

  BackendListRoomsIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref BackendAPI
      Description: "List Rooms"
      ConnectionType: INTERNET
      CredentialsArn: !GetAtt "BackendAPIRole.Arn"
      PassthroughBehavior: "WHEN_NO_MATCH"
      TimeoutInMillis: 29000
      IntegrationMethod: "POST"
      IntegrationType: "AWS_PROXY"
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendListRoomsFn.Arn}/invocations"

  BackendListRoomsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BackendAPI
      RouteKey: GET /stream
      Target: !Sub "integrations/${BackendListRoomsIntegration}"

  BackendRefreshIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref BackendAPI
      Description: "Refresh cached data"
      ConnectionType: INTERNET
      CredentialsArn: !GetAtt "BackendAPIRole.Arn"
      PassthroughBehavior: "WHEN_NO_MATCH"
      TimeoutInMillis: 29000
      IntegrationMethod: "POST"
      IntegrationType: "AWS_PROXY"
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendRefreshFn.Arn}/invocations"

  BackendRefreshRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BackendAPI
      RouteKey: GET /refresh
      Target: !Sub "integrations/${BackendRefreshIntegration}"

  BackendMuxIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref BackendAPI
      Description: "Mux Webhook"
      ConnectionType: INTERNET
      CredentialsArn: !GetAtt "BackendAPIRole.Arn"
      PassthroughBehavior: "WHEN_NO_MATCH"
      TimeoutInMillis: 29000
      IntegrationMethod: "POST"
      IntegrationType: "AWS_PROXY"
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendMuxFn.Arn}/invocations"

  BackendMuxRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BackendAPI
      RouteKey: POST /mux/{muxTokenId}
      Target: !Sub "integrations/${BackendMuxIntegration}"

  BackendAblyKeyIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref BackendAPI
      Description: "Get the client ably key"
      ConnectionType: INTERNET
      CredentialsArn: !GetAtt "BackendAPIRole.Arn"
      PassthroughBehavior: "WHEN_NO_MATCH"
      TimeoutInMillis: 29000
      IntegrationMethod: "POST"
      IntegrationType: "AWS_PROXY"
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendAblyKeyFn.Arn}/invocations"

  BackendAblyKeyRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BackendAPI
      RouteKey: GET /ably
      Target: !Sub "integrations/${BackendAblyKeyIntegration}"

  BackendAttendIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref BackendAPI
      Description: "Login to the attendee portal"
      ConnectionType: INTERNET
      CredentialsArn: !GetAtt "BackendAPIRole.Arn"
      PassthroughBehavior: "WHEN_NO_MATCH"
      TimeoutInMillis: 29000
      IntegrationMethod: "POST"
      IntegrationType: "AWS_PROXY"
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendAttendFn.Arn}/invocations"

  BackendAttendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BackendAPI
      RouteKey: GET /attend/{token}/{where}
      Target: !Sub "integrations/${BackendAttendIntegration}"

  BackendAPIDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - BackendGetStreamIntegration
      - BackendGetStreamRoute
      - BackendListRoomsRoute
      - BackendListRoomsIntegration
      - BackendRefreshRoute
      - BackendRefreshIntegration
      - BackendMuxRoute
      - BackendMuxIntegration
      - BackendAblyKeyRoute
      - BackendAblyKeyIntegration
      - BackendAttendRoute
      - BackendAttendIntegration
    Properties:
      Description: !Sub "${AWS::StackName} API Deployment"
      ApiId: !Ref BackendAPI

  BackendAPIStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      DeploymentId: !Ref BackendAPIDeployment
      Description: !Sub "${AWS::StackName} API v0"
      ApiId: !Ref BackendAPI
      StageName: "api"
      AutoDeploy: true

  FrontendWebsite:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: "PublicRead"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  FrontendAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "CloudFront OAI for ${AppDomain}"

  FrontendWebsiteBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref "FrontendWebsite"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Principal:
              CanonicalUser: !GetAtt FrontendAccessIdentity.S3CanonicalUserId
            Action:
              - "s3:GetObject"
            Resource:
              - !Sub "arn:aws:s3:::${FrontendWebsite}/*"
            Effect: "Allow"

  FrontendDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref AppDomain
        CacheBehaviors:
          - AllowedMethods:
              - "GET"
              - "HEAD"
            CachedMethods:
              - "GET"
              - "HEAD"
            CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad" # "Managed-CachingDisabled"
            Compress: true
            PathPattern: "*.html"
            TargetOriginId: !Sub "${AWS::StackName}-FrontendOrigin"
            ViewerProtocolPolicy: "redirect-to-https"
          - AllowedMethods:
              - "GET"
              - "HEAD"
              - "POST"
              - "OPTIONS"
              - "DELETE"
              - "PUT"
              - "PATCH"
            CachedMethods:
              - "GET"
              - "HEAD"
            CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad" # "Managed-CachingDisabled"
            Compress: true
            PathPattern: "/api/*"
            TargetOriginId: !Sub "${AWS::StackName}-BackendOrigin"
            ViewerProtocolPolicy: "redirect-to-https"
        DefaultRootObject: "index.html"
        DefaultCacheBehavior:
          AllowedMethods:
            - "GET"
            - "HEAD"
          CachedMethods:
            - "GET"
            - "HEAD"
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6" # "Managed-CachingOptimized"
          Compress: true
          TargetOriginId: !Sub "${AWS::StackName}-FrontendOrigin"
          ViewerProtocolPolicy: "redirect-to-https"
        Enabled: true
        HttpVersion: "http2"
        IPV6Enabled: true
        Origins:
          - DomainName: !Sub "${FrontendWebsite}.s3.amazonaws.com"
            Id: !Sub "${AWS::StackName}-FrontendOrigin"
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${FrontendAccessIdentity}"
          - CustomOriginConfig:
              OriginProtocolPolicy: "https-only"
            DomainName: !Sub ${BackendAPI}.execute-api.${AWS::Region}.amazonaws.com
            Id: !Sub "${AWS::StackName}-BackendOrigin"
        PriceClass: "PriceClass_All"
        ViewerCertificate:
          AcmCertificateArn: !Ref "AppCertificate"
          MinimumProtocolVersion: "TLSv1.1_2016"
          SslSupportMethod: "sni-only"

  AppDomainDNSv4:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt "FrontendDistribution.DomainName"
        HostedZoneId: "Z2FDTNDATAQYW2"
      HostedZoneId: !Ref "HostedZoneId"
      Name: !Ref "AppDomain"
      Type: "A"

  AppDomainDNSv6:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt "FrontendDistribution.DomainName"
        HostedZoneId: "Z2FDTNDATAQYW2"
      HostedZoneId: !Ref "HostedZoneId"
      Name: !Ref "AppDomain"
      Type: "AAAA"

  AttendResponseHeaders:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: "AttendResponseHeaders"
        CustomHeadersConfig:
          Items:
            - Header: server
              Override: true
              Value: "ndv"

  # AttendAPICachePolicy:
  #   Type: AWS::CloudFront::CachePolicy
  #   Properties:
  #     CachePolicyConfig:
  #       Name: AttendAPICachePolicy
  #       Comment: !Sub "Cache policy for ${AttendDomain}"
  #       DefaultTTL: 10
  #       MaxTTL: 10
  #       MinTTL: 10
  #       ParametersInCacheKeyAndForwardedToOrigin:
  #         EnableAcceptEncodingGzip: false
  #         EnableAcceptEncodingBrotli: false
  #         CookiesConfig:
  #           CookieBehavior: all
  #         HeadersConfig:
  #           HeaderBehavior: whitelist
  #           Headers:
  #             - "Authorization"
  #         QueryStringsConfig:
  #           QueryStringBehavior: all

  AttendDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref AttendDomain
        CacheBehaviors:
          - AllowedMethods:
              - "GET"
              - "HEAD"
            CachedMethods:
              - "GET"
              - "HEAD"
            CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad" # "Managed-CachingDisabled"
            Compress: true
            PathPattern: "*.html"
            TargetOriginId: !Sub "${AWS::StackName}-FrontendOrigin"
            ViewerProtocolPolicy: "redirect-to-https"
            ResponseHeadersPolicyId: !Ref "AttendResponseHeaders"
          - AllowedMethods:
              - "GET"
              - "HEAD"
              - "POST"
              - "OPTIONS"
              - "DELETE"
              - "PUT"
              - "PATCH"
            CachedMethods:
              - "GET"
              - "HEAD"
            CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad" # "Managed-CachingDisabled"
            # CachePolicyId: !Ref "AttendAPICachePolicy"
            Compress: true
            PathPattern: "/api/*"
            TargetOriginId: !Sub "${AWS::StackName}-BackendOrigin"
            ViewerProtocolPolicy: "redirect-to-https"
            ResponseHeadersPolicyId: !Ref "AttendResponseHeaders"
            OriginRequestPolicyId: "216adef6-5c7f-47e4-b989-5492eafa07d3" # "Managed-AllViewer"
        DefaultRootObject: "attend.html"
        DefaultCacheBehavior:
          AllowedMethods:
            - "GET"
            - "HEAD"
          CachedMethods:
            - "GET"
            - "HEAD"
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6" # "Managed-CachingOptimized"
          Compress: true
          TargetOriginId: !Sub "${AWS::StackName}-FrontendOrigin"
          ViewerProtocolPolicy: "redirect-to-https"
          ResponseHeadersPolicyId: !Ref "AttendResponseHeaders"
        Enabled: true
        HttpVersion: "http2"
        IPV6Enabled: true
        Origins:
          - DomainName: !Sub "${FrontendWebsite}.s3.amazonaws.com"
            Id: !Sub "${AWS::StackName}-FrontendOrigin"
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${FrontendAccessIdentity}"
          - CustomOriginConfig:
              OriginProtocolPolicy: "https-only"
            DomainName: !Sub ${BackendAPI}.execute-api.${AWS::Region}.amazonaws.com
            Id: !Sub "${AWS::StackName}-BackendOrigin"
            OriginCustomHeaders:
              - HeaderName: "x-ndv-distribution"
                HeaderValue: !Ref "AttendDomain"
        PriceClass: "PriceClass_All"
        ViewerCertificate:
          AcmCertificateArn: !Ref "AttendCertificate"
          MinimumProtocolVersion: "TLSv1.2_2018"
          SslSupportMethod: "sni-only"

  AttendDomainDNSv4:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt "AttendDistribution.DomainName"
        HostedZoneId: "Z2FDTNDATAQYW2"
      HostedZoneId: !Ref "HostedZoneId"
      Name: !Ref "AttendDomain"
      Type: "A"

  AttendDomainDNSv6:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt "AttendDistribution.DomainName"
        HostedZoneId: "Z2FDTNDATAQYW2"
      HostedZoneId: !Ref "HostedZoneId"
      Name: !Ref "AttendDomain"
      Type: "AAAA"

  # DNS for AttendDomain

Outputs:
  # FrontendURL:
  #   Value: !GetAtt "FrontendDistribution.DomainName"
  FrontendWebsiteBucket:
    Value: !Ref "FrontendWebsite"
