---
AWSTemplateFormatVersion: "2010-09-09"

Description: "Deploys the mux video monitor"

Parameters:
  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
  AppDomain:
    Type: String
  BackendLambdaS3Bucket:
    Type: String
  BackendLambdaS3Key:
    Type: String

Resources:
  AppCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: !Sub "${AppDomain}"
      DomainValidationOptions:
        - DomainName: !Sub "${AppDomain}"
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: "DNS"
  
  CacheTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
      - AttributeName: CacheKind
        AttributeType: S
      - AttributeName: CacheKey
        AttributeType: S
      BillingMode: "PAY_PER_REQUEST"
      KeySchema:
      - AttributeName: CacheKind
        KeyType: HASH
      - AttributeName: CacheKey
        KeyType: RANGE

  BackendLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns: 
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
        - Principal:
            Service: 
            - "lambda.amazonaws.com"
          Action:
          - "sts:AssumeRole"
          Effect: "Allow"
  
  CanPopulateDynamoCache:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "CanPopulateDynamoCache"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Action:
          - "dynamodb:Get*"
          - "dynamodb:Put*"
          Resource:
          - !GetAtt "CacheTable.Arn"
      Roles:
      - !Ref "BackendLambdaRole"

  CanReadFromSSM:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "CanReadFromSSM"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Action:
          - "ssm:GetParameter"
          - "ssm:GetParameters"
          - "ssm:GetParametersByPath"
          - "ssm:ListTagsForResource"
          Resource:
          - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/multiview/mux/*"
      Roles:
      - !Ref "BackendLambdaRole"

  BackendGetStreamFn:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref BackendLambdaS3Bucket
        S3Key: !Ref BackendLambdaS3Key
      Handler: src/index.getStream
      Role: !GetAtt "BackendLambdaRole.Arn"
      Runtime: "nodejs14.x"
      Timeout: 25
      Environment:
        Variables:
          CACHE_TABLE_NAME: !Ref "CacheTable"
  
  BackendListRoomsFn:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref BackendLambdaS3Bucket
        S3Key: !Ref BackendLambdaS3Key
      Handler: src/index.listRooms
      Role: !GetAtt "BackendLambdaRole.Arn"
      Runtime: "nodejs14.x"
      Timeout: 25
      Environment:
        Variables:
          CACHE_TABLE_NAME: !Ref "CacheTable"
  
  BackendRefreshFn:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref BackendLambdaS3Bucket
        S3Key: !Ref BackendLambdaS3Key
      Handler: src/index.refresh
      Role: !GetAtt "BackendLambdaRole.Arn"
      Runtime: "nodejs14.x"
      Timeout: 25
      Environment:
        Variables:
          CACHE_TABLE_NAME: !Ref "CacheTable"

  BackendAPIRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "apigateway.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: "/"
      Policies:
      - PolicyName: LambdaAccess
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action: "lambda:*"
            Resource:
            - !GetAtt BackendGetStreamFn.Arn
            - !GetAtt BackendListRoomsFn.Arn
            - !GetAtt BackendRefreshFn.Arn

  BackendAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      ProtocolType: HTTP
      Description: !Sub "${AWS::StackName} API"
      Name: !Sub "${AWS::StackName}-api"
      CorsConfiguration:
        AllowCredentials: true
        AllowHeaders:
        - "authorization"
        - "content-type"
        AllowMethods:
        - "GET"
        - "POST"
        AllowOrigins:
        - "http://localhost:1234"
        - "https://nextdayvideo.com"
        - !Sub "https://${AppDomain}"

  BackendGetStreamIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref BackendAPI
      Description: "Get Stream"
      ConnectionType: INTERNET
      CredentialsArn: !GetAtt "BackendAPIRole.Arn"
      PassthroughBehavior: "WHEN_NO_MATCH"
      TimeoutInMillis: 29000
      IntegrationMethod: "POST"
      IntegrationType: "AWS_PROXY"
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendGetStreamFn.Arn}/invocations"

  BackendGetStreamRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BackendAPI
      RouteKey: GET /stream/{muxTokenId}
      Target: !Sub "integrations/${BackendGetStreamIntegration}"
  
  BackendListRoomsIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref BackendAPI
      Description: "List Rooms"
      ConnectionType: INTERNET
      CredentialsArn: !GetAtt "BackendAPIRole.Arn"
      PassthroughBehavior: "WHEN_NO_MATCH"
      TimeoutInMillis: 29000
      IntegrationMethod: "POST"
      IntegrationType: "AWS_PROXY"
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendListRoomsFn.Arn}/invocations"

  BackendListRoomsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BackendAPI
      RouteKey: GET /stream
      Target: !Sub "integrations/${BackendListRoomsIntegration}"

  BackendRefreshIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref BackendAPI
      Description: "Refresh cached data"
      ConnectionType: INTERNET
      CredentialsArn: !GetAtt "BackendAPIRole.Arn"
      PassthroughBehavior: "WHEN_NO_MATCH"
      TimeoutInMillis: 29000
      IntegrationMethod: "POST"
      IntegrationType: "AWS_PROXY"
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendRefreshFn.Arn}/invocations"

  BackendRefreshRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BackendAPI
      RouteKey: GET /refresh
      Target: !Sub "integrations/${BackendRefreshIntegration}"

  BackendAPIDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - BackendGetStreamIntegration
    - BackendGetStreamRoute
    - BackendListRoomsRoute
    - BackendListRoomsIntegration
    - BackendRefreshRoute
    - BackendRefreshIntegration
    Properties:
      Description: !Sub "${AWS::StackName} API Deployment"
      ApiId: !Ref BackendAPI

  BackendAPIStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      DeploymentId: !Ref BackendAPIDeployment
      Description: !Sub "${AWS::StackName} API v0"
      ApiId: !Ref BackendAPI
      StageName: "api"
      AutoDeploy: true

  FrontendWebsite:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: "PublicRead"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  FrontendAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'CloudFront OAI for ${AppDomain}'
  
  FrontendWebsiteBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref "FrontendWebsite"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Principal:
            CanonicalUser: !GetAtt FrontendAccessIdentity.S3CanonicalUserId
          Action:
          - "s3:GetObject"
          Resource:
          - !Sub "arn:aws:s3:::${FrontendWebsite}/*"
          Effect: "Allow"
       
  FrontendDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Aliases:
        - !Ref AppDomain
        CacheBehaviors:
        - AllowedMethods:
          - "GET"
          - "HEAD"
          CachedMethods:
          - "GET"
          - "HEAD"
          CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad" # "Managed-CachingDisabled"
          Compress: true
          PathPattern: "*.html"
          TargetOriginId: !Sub "${AWS::StackName}-FrontendOrigin"
          ViewerProtocolPolicy: "redirect-to-https"
        - AllowedMethods:
          - "GET"
          - "HEAD"
          - "POST"
          - "OPTIONS"
          - "DELETE"
          - "PUT"
          - "PATCH"
          CachedMethods:
          - "GET"
          - "HEAD"
          CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad" # "Managed-CachingDisabled"
          Compress: true
          PathPattern: "/api/*"
          TargetOriginId: !Sub "${AWS::StackName}-BackendOrigin"
          ViewerProtocolPolicy: "redirect-to-https"
        DefaultRootObject: "index.html"
        DefaultCacheBehavior:
          AllowedMethods:
          - "GET"
          - "HEAD"
          CachedMethods:
          - "GET"
          - "HEAD"
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6" # "Managed-CachingOptimized"
          Compress: true
          TargetOriginId: !Sub "${AWS::StackName}-FrontendOrigin"
          ViewerProtocolPolicy: "redirect-to-https"
        Enabled: true
        HttpVersion: "http2"
        IPV6Enabled: true
        Origins:
          - DomainName: !Sub "${FrontendWebsite}.s3.amazonaws.com"
            Id: !Sub "${AWS::StackName}-FrontendOrigin"
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${FrontendAccessIdentity}"
          - CustomOriginConfig:
              OriginProtocolPolicy: "https-only"
            DomainName: !Sub ${BackendAPI}.execute-api.${AWS::Region}.amazonaws.com
            Id: !Sub "${AWS::StackName}-BackendOrigin"
        PriceClass: 'PriceClass_All'
        ViewerCertificate:
          AcmCertificateArn: !Ref "AppCertificate"
          MinimumProtocolVersion: 'TLSv1.1_2016'
          SslSupportMethod: 'sni-only'

  AppDomainDNSv4:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt "FrontendDistribution.DomainName"
        HostedZoneId: "Z2FDTNDATAQYW2"
      HostedZoneId: !Ref "HostedZoneId"
      Name: !Ref "AppDomain"
      Type: "A"

  AppDomainDNSv6:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt "FrontendDistribution.DomainName"
        HostedZoneId: "Z2FDTNDATAQYW2"
      HostedZoneId: !Ref "HostedZoneId"
      Name: !Ref "AppDomain"
      Type: "AAAA"

Outputs:
  # FrontendURL:
  #   Value: !GetAtt "FrontendDistribution.DomainName"
  FrontendWebsiteBucket:
    Value: !Ref "FrontendWebsite"
